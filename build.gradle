plugins {
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'nebula.maven-publish' version '18.4.0'
    id 'nebula.release' version '18.0.5'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

def junitVersion = '5.10.0'
def splitClientVersion = '4.7.2'
def jmhsVersion = '1.32'

group = 'com.example'
description = 'Maze Runner'

dependencies {
    // springboot
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'

    implementation 'org.springframework.boot:spring-boot-test-autoconfigure:2.6.7'

    implementation "io.split.client:java-client:${splitClientVersion}"
    implementation "org.openjdk.jmh:jmh-core:${jmhsVersion}"
    implementation "org.openjdk.jmh:jmh-generator-annprocess:${jmhsVersion}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
}


java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
